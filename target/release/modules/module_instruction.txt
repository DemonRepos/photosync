После заполнения всех параметров необходимо удалить лишние символы и пробелы между данными.
Пример результирующего файла представлен в доументе module_sample.txt

Необходимо сохранить все поставленные скобки и запятые 
{

    В полях name и image указывается название модуля,
    отображаемое в программе,
    и ссылка на картинкудля модуля
    "name": "Example",
    "image": "https://img.icons8.com/all/500/module.png",

    Поле is_authorization_required показывает,
    требуется ли авторизация для получения изображений с сервера.
    Если требуется авторизация,
    нужно указать значение true.Если не требуется - false
    "is_authorization_required": false,

    В поле authorization указывается ссылка для OAuth - авторизации.Как ее получить,
    написано в документации по API.
    Если авторизации не требуется,
    поле можно оставить пустым
    "authorization": "",

    В поле redirect указывается ссылка,
    на которую переадресовывается пользователь после авторизации.
    Она нужна для получения параметров,
    поэтому ее нужно заполнить
    "redirect": "",

    В поле access_params вводятся параметры,
    которые нужно получить после авторизации для доступа к аккаунту пользователя
    "access_params": [],

    Если у сайта есть специальный сервер для загрузки фотографий,
    в это поле ставится значение true.
    Если ссылку для загрузки нужно получать через специальный метод,
    в поле ставится false.
    "has_upload_server": true,

    Здесь указывается путь в массиве изображений до ссылки на скачивание каждого изображения.Пример класса Path приведен после текста
    "path_to_url": [Path, Path],
	
	В поле image_name указывается название поля, под которым нужно отправлять изображение на сервер
	"image_name": "photo",

    В массиве get_photos прописываются все запросы,
    необходимые для получения списка изображений с сайта.
    Пример написания запросов приведен в конце файла.Конечным параметром,
    получаемым при последнем запросе,
    должен быть
    массив со всеми изображениями.

    "get_photos": [Request, Request],

    В массиве post_photos прописываются все запросы,
    необходимые для публикации изображения на сайт,
    включающие получение
    сервера для загрузки,
    подтверждения загрузки и публикации изображений в общий доступ.Последним параметром,
    получаемым при
    последнем запросе,
    должен быть результат,
    который показывает,
    был ли запрос выполнен успешно или нет.
    "post_photos": [Request, Request, Request],

    В поле result_success пишется значение,
    которое возвращается после последнего метода в массиве post_photos.
    Если возвращаемый запросом результат будет совпадать с данным полем,
    операция публикации будет считаться успешной.
    "result_success": "1"
}

Пример объекта Path: 
{
    "field": "url",
    "column": -1
}

"field" - название поля, к чьим данным нужно получить доступ.Column - элемент массива, которое нужно выбрать.
Если после получения данных из поля получается объект({"field": "name",...}), в колонке указывается значение - 1.
Если после получения данных из поля получается массив([...]), в колонке указывается номер элемента, начиная с нуля, к
которому следует обратиться следующим.
Если в массиве нужно обратиться к последнему его элементу, но его номер изначально неизвестен, в колонке указывается - 2.
Пример: {
    "field": "name",
    "object": {
        "array":
        [{
                "target": "value",
                "field": "name",
                "field": "name"
            } {
                ...
            }
        ]
    }
}

Для получения строки из поля "target" следует указать следующий путь в массиве:
[{
        "field": "object",
        "column": -1
    }, {
        "field": "array",
        "column": 0
    }, {
        "field": "target",
        "column": -1
    }
]

Пример объекта Request:

{
    В поле type пишется тип запроса - GET или POST.
    "type": "GET",

    В поле link пишется ссылка,
    на которую выполняется запрос.
    Если у данного сайта необходимо получить ссылку для загрузки через запрос GET,
    при запросе POST
    вместо ссылки пишется название параметра,
    в котором хранится полученная ссылка для загрузки.
    Знак вопроса для ввода параметров и все базовые параметры,
    которые не нужно получать другими методами,
    (например версия API)необходимо прописать в самой ссылке.
    "link": "https://www.example.com/get?v=5.0",

    В массив required params пишутся имена всех параметров,
    которые нужно подставить в метод.
    Записываются параметры в виде объекта Path с полями "field" и "column".
    Для запроса GET все поля column можно оставить как 0.
    Для запроса POST необходимо поставить номер согласно параметру: 0 - подстановка в строку, 1 - текстовая часть в посылаемом ответе, 2 - бинарная часть в посылаемом ответе.
    Для публикации изображения также необходимо указать в этом массиве поле для передачи изображения и ицифру 2.
	"required_params": [Path, Path],

    В массив results пишутся все параметры,
    которые необходимо получить из ответа и занести в программу для
    использования в дальнейших запросах в поле required_params.
    Пример объекта Param представлен далее.
    "results": [Param, Param],
	
	В поле error необходимо указать значение, получаемое при ошибке выполнения запроса.
        Имя параметра - значение, получаемое из запроса (может быть и ключом)
		Путь параметра - путь к получаемому значению.
		Считается, что вывелась ошибка, если полученное значение не равно null и соответствует имени параметра
	"error":Param,
	
	В поле error_message указывается объект формата Param с путем для получения сообщения для ошибки. Полученное сообщение
	отоюразится в логе выполнения задач в качестве причины ошибки. Данный параметр можно оставить пустым ({}).
	"error_message":Param
}

Пример объекта Param: 
{
    В поле name указывается название параметра.Оно может не зависеть от названия поля в ответе,
    из которого
    получается данный параметр,
    но именно по нему будет искаться значение для массива required_params.
    Его следует заполнить соответственно документации API на требуемые параметры.
    "name": "param_name1",

    Поле isConcatenated указывает,
    является ли данный параметр результатом слияния нескольких строк.
    Если полученные параметры не нужно преобразовывать в одну строку,
    в поле указывается false.
    Если требуется преобразование,
    указывается true.
    "isConcatenated": true,

    В поле formatString указывается шаблон для проведния преобразования строки.На местах,
    куда следует
    подставить значения из ответа,
    ставится % s.
    Если преобразования строки не требуется,
    поле можно оставить пустым
    "formatString": "user_%s_data_%s",

    В массиве path_to_params прописываются пути ко всем параметрам в ответе,
    из которых следует получить
    запрашиваемый параметр.Если поле не требует преобразования,
    помещается только один массив.
    В противном случае нужно указать по одному массиву для каждого параметра,
    который нужно поместить в
    шаблон.Параметры следует указывать в порядке,
    в котором они появляются в шаблоне.
    "path_to_params": [[path_to_user: Path], [path_to_data: Path]]
}
